import numpy as np
from pycuda import compiler, driver
from pycuda import autoinit

#kernel declaration
mod = compiler.SourceModule("""
__device__ unsigned int idx3d(int i, int k, int l, int M, int P)
{
    return k*P + i*M*P + l;

}

__device__ unsigned int idx2d(int i, int j, int M)
{
    return j + i*M;

}


__global__ void distance2(int N, int M, int P, float *d1, float *res1,  float *res2)
{
    int i = threadIdx.x + blockDim.x * blockIdx.x;
    int j = threadIdx.y + blockDim.y * blockIdx.y;

    res1[i] = d1[i];
    res2[] = d1[j]+d1[i];


}
""")



#make data
a=2
b=4
c=2

data1 = np.array(range(a*b*c)).astype(np.float32).reshape(-1,b,c)
#data1 = np.zeros(a*b*c).astype(np.float32).reshape(-1,b,c)

N=data1.shape[0]
M=data1.shape[1]
P=data1.shape[2]

print data1
print "N: ",N
print "M: ",M
print "P: ",P


res1 = np.zeros([N*M*P]).astype(np.float32)
res2 = np.zeros([N*M*P]).astype(np.float32)

#invoke kernel
dist_gpu = mod.get_function("distance2")
dist_gpu(np.int32(N), np.int32(M), np.int32(P), driver.In(data1), driver.Out(res1), driver.Out(res2), block=(22,1,1), grid=(np.int(np.ceil(N*M*P/22.0)),np.int(np.ceil(N*M*P/22.0))))

print res1
print res2
print res1 - np.array(range(a*b*c)).astype(np.float32)
print res2 - 2*np.array(range(a*b*c)).astype(np.float32)



